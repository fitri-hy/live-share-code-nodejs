<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Room <%= roomId %></title>
	<link rel="icon" type="image/x-icon" href="/assets/images/logo.ico">
    <link rel="stylesheet" href="/assets/css/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/theme/seti.min.css">
    <style>
        .custom-scrollbar::-webkit-scrollbar {
            width: 8px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background-color: rgba(255, 255, 255, 0.3);
            border-radius: 4px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background-color: rgba(255, 255, 255, 0.6);
        }
        .custom-scrollbar::-webkit-scrollbar-track {
            background-color: rgba(0, 0, 0, 0.1);
            border-radius: 4px;
        }

        .custom-scrollbar {
            scrollbar-width: thin;
            scrollbar-color: rgba(255, 255, 255, 0.3) rgba(0, 0, 0, 0.1);
        }
        .custom-scrollbar:hover {
            scrollbar-color: rgba(255, 255, 255, 0.6) rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body class="h-screen w-full bg-neutral-800 text-gray-300">
    <div class="grid grid-cols-1 gap-4 md:flex h-full">
        <div class="flex-1 flex flex-col md:pl-4 md:py-4">
            <div class="grid grid-cols-1 gap-2 border-b border-neutral-700 md:border-none md:flex md:justify-between items-center">
                <span class="text-center md:text-left px-4 py-2 bg-neutral-900 rounded-t">Room ID: <%= roomId %> (<b><%= username %></b>)</span>
                <select id="language" class="px-4 py-2 bg-neutral-900 rounded-t">
                    <option value="css">HTML</option>
                    <option value="javascript">JavaScript</option>
                    <option value="python">Python</option>
                </select>
            </div>
            <textarea id="editor" class="hidden"></textarea>
        </div>

        <div class="w-full flex flex-col gap-4 md:max-w-sm bg-neutral-900 p-3 min-h-screen">
            <div class="h-full flex flex-col justify-center items-center border border-neutral-700 rounded p-3 text-center">
                <div>
					<img class="h-20 w-20 m-auto object-cover" src="/assets/images/logo.ico" alt="logo">
					<h2 class="text-center text-2xl font-bold">
						Live Code Editor
					</h2>
					<span class="text-xs text-center">
						Powered by <a class="text-blue-500 hover:text-blue-600" href="https://i-as.dev" target="_blank">I-As.Dev</a>
					</span>
				</div>
            </div>
            <div class="h-auto border border-neutral-700 rounded p-3">
                <h2 class="text-center text-2xl font-bold border-b border-neutral-700 mb-2 pb-2">
                    User Join
                </h2>
                <ul id="user-list" class="custom-scrollbar flex flex-wrap h-32 gap-3 overflow-y-auto"></ul>
            </div>
            <div class="h-auto border border-neutral-700 rounded p-3">
                <h2 class="text-center text-2xl font-bold border-b border-neutral-700 mb-2 pb-2">
                    Chat Group
                </h2>
                <div id="chat-messages" class="custom-scrollbar h-72 flex flex-col gap-2 overflow-y-auto"></div>
                <div class="mt-4 w-full bottom-16 flex gap-1">
                    <input id="message-input" class="p-3 text-white rounded-lg border w-full border-neutral-700 bg-neutral-800 focus:outline-none focus:ring-2 focus:ring-emerald-500 placeholder:text-neutral-400" placeholder="Enter message...">
                    <button id="send-message-btn" class="p-3 bg-emerald-600 hover:bg-emerald-700 rounded-lg">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-5 w-5 text-white">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5" />
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/mode/css/css.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/mode/python/python.min.js"></script>

    <script>
        const socket = io();
        const roomId = "<%= roomId %>";
        const username = "<%= username %>";

        socket.emit("join-room", { roomId, username });

        const editor = CodeMirror.fromTextArea(document.getElementById("editor"), {
            mode: "css",
            theme: "seti",
            lineNumbers: true,
            lineWrapping: true,
            extraKeys: { "Ctrl-Space": "autocomplete" }
        });

        socket.on("load-code", (code) => {
            editor.setValue(code);
        });

        editor.on("change", () => {
            socket.emit("code-update", { roomId, code: editor.getValue() });
        });

        socket.on("code-update", (code) => {
            if (editor.getValue() !== code) {
                editor.setValue(code);
            }
        });

        document.getElementById("language").addEventListener("change", (e) => {
            const newMode = e.target.value;
            editor.setOption("mode", newMode);

            if (newMode === "css" || newMode === "css") {
                editor.setOption("htmlMode", true);
            } else {
                editor.setOption("htmlMode", false);
            }
        });

        socket.on("update-users", (users) => {
            const userList = document.getElementById("user-list");
            userList.innerHTML = "";
            users.forEach(user => {
                const li = document.createElement("li");
                li.textContent = user;
                userList.appendChild(li);
            });
        });

        function adjustEditorHeight() {
            const editorContainer = document.querySelector('.flex-1');
            const editorHeight = window.innerHeight - editorContainer.getBoundingClientRect().top;
            editor.setSize(null, editorHeight);
        }

        window.addEventListener('resize', adjustEditorHeight);
        adjustEditorHeight();

        document.getElementById("send-message-btn").addEventListener("click", () => {
            const messageInput = document.getElementById("message-input");
            const message = messageInput.value.trim();
            if (message) {
                socket.emit("send-message", { roomId, message, username });
                messageInput.value = "";
            }
        });

        socket.on("new-message", (message) => {
            const messageElement = document.createElement("div");
            messageElement.classList.add("flex", "w-full", message.username === username ? "justify-end" : "justify-start");
            messageElement.innerHTML = `
                <div class="text-gray-300 max-w-[90%]">
                    <span class="text-xs flex justify-${message.username === username ? "end" : "start"}">${message.username}</span>
                    <div class="flex">
                        <div class="text-sm flex ${message.username === username ? "bg-neutral-800" : "bg-neutral-700"} px-2 py-1 rounded">
                            ${message.message}
                        </div>
                    </div>
                </div>
            `;
            document.getElementById("chat-messages").appendChild(messageElement);
            document.getElementById("chat-messages").scrollTop = document.getElementById("chat-messages").scrollHeight;
        });

        socket.on("load-messages", (messages) => {
            const chatMessages = document.getElementById("chat-messages");
            messages.forEach((message) => {
                const messageElement = document.createElement("div");
                messageElement.classList.add("flex", "w-full", message.username === username ? "justify-end" : "justify-start");
                messageElement.innerHTML = `
                    <div class="text-gray-300 max-w-[90%]">
                        <span class="text-xs flex justify-${message.username === username ? "end" : "start"}">${message.username}</span>
                        <div class="flex">
                            <div class="text-sm flex ${message.username === username ? "bg-neutral-800" : "bg-neutral-700"} px-2 py-1 rounded">
                                ${message.message}
                            </div>
                        </div>
                    </div>
                `;
                chatMessages.appendChild(messageElement);
            });
        });
    </script>
</body>
</html>
